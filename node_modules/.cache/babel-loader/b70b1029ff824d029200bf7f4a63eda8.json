{"ast":null,"code":"// import axios from 'axios'\n// const request = axios.create({\n// \tbaseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n//     timeout: 99999999\n// })\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//  // config.headers['token'] = user.token;  // 设置请求头\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         console.log(res)\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n// // 添加请求拦截器，在请求头中加token\n// axios.interceptors.request.use(\n//     config => {\n//       if (localStorage.getItem('Authorization')) {\n//         config.headers.Authorization = localStorage.getItem('Authorization');\n//       }\n//       return config;\n//     },\n//     error => {\n//       return Promise.reject(error);\n//     });\n//     // localStorage.removeItem('Authorization');\n//     // this.$router.push('/login');\n// export default request\n// import axios from 'axios'\n// const request = axios.create({\n// \tbaseURL: 'http://localhost:8080',  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\n//     timeout: 999999\n// })\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//  // config.headers['token'] = user.token;  // 设置请求头\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n// export default request","map":{"version":3,"names":[],"sources":["/Users/linduoying/Downloads/learningVue/veterinary-web/src/utils/request.js"],"sourcesContent":["// import axios from 'axios'\n\n// const request = axios.create({\n// \tbaseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n//     timeout: 99999999\n// })\n\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  \n//  // config.headers['token'] = user.token;  // 设置请求头\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n        \n//         let res = response.data;\n//         console.log(res)\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n\n// // 添加请求拦截器，在请求头中加token\n// axios.interceptors.request.use(\n//     config => {\n//       if (localStorage.getItem('Authorization')) {\n//         config.headers.Authorization = localStorage.getItem('Authorization');\n//       }\n   \n//       return config;\n//     },\n//     error => {\n//       return Promise.reject(error);\n//     });\n\n//     // localStorage.removeItem('Authorization');\n//     // this.$router.push('/login');\n\n// export default request\n\n\n// import axios from 'axios'\n\n// const request = axios.create({\n// \tbaseURL: 'http://localhost:8080',  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\n//     timeout: 999999\n// })\n\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  \n//  // config.headers['token'] = user.token;  // 设置请求头\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n\n\n// export default request\n\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA"},"metadata":{},"sourceType":"script"}